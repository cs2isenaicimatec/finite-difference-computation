Have replaced the old Korn shell versions by Bourne shells.  The
Korn versions are in the subdirectory 'KornShell'.  Also modernized
the names of the shells: Decontest -> DeconTest, etc.
Jack 02/02/94

----
This directory contains example shells for a "typical" processing stream:

	Segyread
	Cdpsort
	Getcdps
	Cos, Plotcos
	Filtertest
	Decontest
	Cvstack, Plotcvstack
	Nmoscan, Plotnmoscan
	Velan or Velan.nmo
	Dmo
	Nmostack
	Mig

There is no such thing as a "typical" processing stream!  So, you will
probably want to change the order, repeat some things at different
stages of the processing, etc.  Furthermore, the functionality won't be
exactly what you want--these shells are meant to SUGGEST the kind of
leverage you can get by using shells, not to set in concrete some
particular mode of data processing.  Finally, the shells contain some
hard-wired numbers (near the top where you can see them) that have to
be changed for each particular data set.

Take a look at Dmo, Nmostack and Mig first.  Dave Hale wrote the
original version of these and used something like them on field data.
They are straightforward and more typical than some of the ornate
shells I've included as imagination motivators.

===> The SU User's Manual also covers the rest of this (jkc, 02/02/95)<===
None of the common shells (ksh, sh or csh) admit floating point arithmetic.
I really needed this for some of the shells and I recently figured out
a way to do it.

My trick is to call in the Unix calculator program, bc, and present data to
it by using a "here" document.  Assuming that dt has been defined earlier
in microseconds and you need it in seconds, in Korn shell, you'd go:

		dt=$(bc -l <<-END
			$dt / 1000000
		END)
	
while in Bourne it's


		dt=`bc -l <<-END
			$dt / 1000000
		END`
	
The word, END, can be replaced by any word not used inside the
calculation.  The -l calls in the floating point library,
the << invokes the here document and the - following it allows
one to use tabs freely for stylistic indentation.


Jack Cohen
04/01/91
