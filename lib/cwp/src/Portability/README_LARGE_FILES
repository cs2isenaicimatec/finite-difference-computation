Update:  2 December 2003

By default 32 bit Unix and Unix-like systems do not support 
file sizes greater than 2GB. There is fix, however, that will
allow these larger files to be supported.

An entry for a LARGE_FILE_FLAG has been added to Makefile.config
You should just be able to uncomment the line:

#LARGE_FILE_FLAG =  -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE

in Makefile.config, and have automatic large (>2gb) filesize 
support.



---- the following notes are largely superceded, but are left 
in the event that an expert user may need them .

1 Feb 2002   ---- Large (>2GB) filesize support
(Supplied by John Anderson of ExxonMobil)

Most of this is for RedHat 7.2 Linux, but applies to other platforms
as well.

I find that I can work with larger than 2 GB files on RedHat Linux 7.2
Pentiums if

1) I use the ext3 file system

2) I replace all seek and tell (fseek, ftell) by fseeko and ftello
functions and make the offset variable of type off_t 
(In post Release 35 versions, this has been done.)

3) compile with the large file compile options

4) use bash (using redirects from tcsh seems to fail but they work ok in
bash)

to find all the places where code needs to be changed.  I did not rework
the graphics directories as you can't diplay 2 GB worth of data if you put
it all in memory anyway.  The proprietary codes also need reworking.

fseeko and ftello are the same as fseek and ftell except the offset
variable is of type off_t instead of long.  That forces me to cast the
constants in lots of calls.

There are routines, fopen64, freopen64, fseeko64, ftello64, ... which are
defined in stdio.h
and unistd.h that implement the 64 bit large file interface.  Using the
large file compiler
directives the compiler substitutes these functions for fopen, ....  The
two functions that
require change to allow this substitution are fseek and ftell because they
have the
file offset variable defined as an integer.  The routines fseeko and ftello
define the file
offset variable as off_t which the large file interface can then redefine
to be a 64 bit
variable if large files are required.  Thus, you can explicitly use the
large file
routines (as you suggested on SGI) or you can use the standard routines
plus
compiler directives to gain large file access.  Doing the substitution of
fseeko and ftello
for fseek and ftell plus using compiler directives allows large file
support with the
minimum number of code changes.  I changed efseek and eftell to match
fseeko and ftello by using an offset of type off_t.

Note that SUN negotiated with the industry to set up this interface as a
portable
standard so this standard applies to all Unix operating systems, not just
Linux.
Note also that if you encountered an old system that did not have
fseeko and ftello defined, you could simply add define statements to set
them to fseek and ftell and define off_t to be an integer and all would
remain
the same.  For example, the IBM says that fseeko, fseeko64, ... apply to
Version 4.2
and all later releases.

On RedHat Linux 7.2 I am using the following in my Makefile.config.

OPTC = -O3 -Wall -ansi -pedantic -D_POSIX_SOURCE -D_FILE_OFFSET_BITS=64
-D_LARGEFILE_SOURCE

On a SUN, try entering "man lfcompile" or "man interface64" to get
documentation
foe large file support.

On Linux, look at the header files stdio.h and unistd.h.

The changes apply to all Unix platforms with a 32 bit "long"
data type that can support larger than 2 GB files even though I am
suggesting the changes relative to RedHat Linux 7.2.  

---- 2 July 2003 --- by John Anderson.
One bit of erata associated with my note in
src/Portability/README_LARGE_FILES ...

I note in my prior documentation on large files, that I did not mention
that you
need the following to go larger than 4 GB.

 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE

The first two options get you to bigger than 2 GB ok for all sequential I/O
but only up to 4 GB for random I/O (because OFF_T ends up as an "unsigned
long"
with a 4 billion limit on a 32 bit) .   You need the last one to go bigger
than
4 GB for random I/O because without the -D_GNU_SOURCE option you don't
have the an option for 64 bit integers of type "long long" or "unsigned
long long"
on a 32 bit platform.

Obviously, this impacts only a few modules but "susort" is a key one.

-JEA

John Stockwell	 | john@dix.Mines.EDU
Center for Wave Phenomena (The Home of Seismic Un*x)
Colorado School of Mines
Golden, CO 80401 | http://www.cwp.mines.edu/cwpcodes
voice: (303) 273-3049
