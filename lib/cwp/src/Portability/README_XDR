XDR README				4 August 1998

The XDR routines are library functions that are used for portable
eXternal Data Representation. These library functions are used
as part of network filesystem (NFS), and should be available
on most, if not all Unix and Unix-like systems. 

(1) The XDR codes are now optionally included by setting the -DSUXDR
compiler flag.  They are not included if that flag is not set
yielding compilations as they were before.

Uncomment the line in Makefile.config that looks like this
to invoke the XDR option.
#XDRFLAG = -DSUXDR

Data in the SUXDR format should be portable between systems that
are 32 bit little-endian, 32 bit big-endian, and 64 bit.
Also, such items as segyread.c and segywrite.c should work on
all systems, if XDR is used. 

Modifications are in su/include su/lib and su/main directories.
Grep for "su_xdr.h" to find files that have been modified.
However, you don't have to do anything, except make sure that the 
XDRFLAG line is uncommented in Makefile.config before you compile.

Use the program "suoldtonew" to convert files in previous SU formats
to the new XDR formats.

SEGDREAD -- There is a version of SEGDREAD which makes use of the
highly portable SFIO routines. This is installed via:   make sfinstall
Caveat:  if you use a -ansi flag on a system that does not have
the type: long long defined, you will get many warnings and the
code will possibly not compile.


Comments from John Anderson.
Tested so far: 
(a) File formats read/written by fgettr/fputtr transport ok
between SUN, Cray T3E, and Linux which tests 32 bit, 64 bit, and big and
little endian formats.
(b) Segyread and segywrite work ok with -DSUXDR set everywhere tested.
They do not work ok on T3E if the flag is not set.  I put the code
to convert ascii to ebcdic and vice versa as inline routines.
(c) I'm not sure about segdread.  The version that came with version 31 
did not compile ok on T3E or my Linux box.  I built an old version and
left it at that for the time being.

(2) All of the script files now test to see if the environmental
variable $CWPSRC is set.  If not, they set it equal to $CWPROOT.
They use the $CWPSRC/src directory for source code and documentation.
This allows optional builds for different machines from the same
source code directory.  A user can optionally set only CWPROOT
and all still works as before.

To compile binaries in a machine specific location, you

setenv CWPROOT machine_directory  ($CWPROOT/bin will be executables...)
setenv CWPSRC source_director  (put src/...   tree here)

mkdir $CWPROOT/src
cp $CWPSRC/src/Makefile.config $CWPROOT/src
vi $CWPROOT/src/Makefile.config  and set up your defines for the build
cd $CWPSRC/src
make install

To build for another machine, redefine $CWPROOT, fix up
$CWPROOT/src/Makefile.config and enter "make remake"

You can also do this to test versions with and without XDR
from the same source directory.  Please incorporate these changes
to help with system administration.

(3) On the T3E, the C compiler has a builtin complex data type.  
I modified cwp.h to have cwp complex types defined as cwp_complex 
rather than complex to make everything work properly.  That requires 
the compiler flag -DCRAY to be operationally different than before.

 
(4) The upgrade on Linux to RedHat 5.0 needed some debugging to
get my development environment back in place.  That is not an
SU question but a warning that the upgrade to the LibC object
library environment requires a little care.

John Anderson, December 31, 1997
