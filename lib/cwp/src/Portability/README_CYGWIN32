Commentary by Rick Williams (6 April 2005):
 
Cygwin versions ago, and obsolete. Cygwin is a moving
(and improving) target, and I don't think that any of the
comments in README.CYGWIN32 apply to the current version
of Cygwin.

Using earlier versions of Cygwin and SU, I had to hack
the source code to work around problems/limitations
in Cygwin and I never got everything to work. This
time things went much more smoothly. I haven't tested
everything in SU, of course, but haven't hit any snags
thus far.

The latest version of Cygwin is 1.5.15. I am a couple
of ticks behind at 1.5.12 myself.

To build SU under Cygwin-

Download the latest version of cygwin. DO NOT accept
the default download. Instead, download and install
everything. A significant amount of the extra stuff
is not needed for SU but some of it is, and given the
price of disk drives it's not worth sorting out just
the necessary bits.

Referring to the file my.bashrc
I used /opt/su for CWPROOT

See makefile.config. Hopefully everything is OK,
except that I did not deal with glut.  Some version of glut
appears to exist on cygwin, but I didn't try to figure
it out. Otherwise changes to makefile.config as
distributed were minimal. I don't know why I had to
remake xt and xm, but I did.

A tar file that contains my version of CWPROOT is at
http://tanasi.gg.utk.edu/SU/
I'm not sure how transportable it is. I guess it would be
OK with recent versions of Cygwin (1.5.12 or later). I
don't know about older versions of Cygwin or versions
of Windows older than XP.

Here is what I did-

Edit makefile.config
Edit velpertan.c and change "time(" to "vpttime(" on 14 lines.
(*** JWS *** this has been fixed in the current beta and
  all releases later than 38)

make install appears to work but with some warnings

make xtinstall reports nothing to do
make xtremake does a bunch of stuff and appears to work

make finstall appears to work

make mglinstall was not attempted

make utils appears to work

make xminstall reports nothing to do
make xmremake does a bunch of stuff and appears to work

make sfinstall appears to work but with numerous warnings


Best Regards,

Rick Williams

------- Rick Williams    .bashrc file ------------------


export CWPROOT=/opt/su
export X11ROOT=/usr/X11R6
export MWMROOT="$X11ROOT"/LessTif
# The order in PATH is important.  Do not change it without a good reason.
export PATH=/bin:/usr/local/bin:/usr/local/sbin:"$X11ROOT"/bin:"$MWMROOT"/bin:"$CWPROOT"/local/bin:"$CWPROOT"/bin
export PATH=$PATH:/cygdrive/c/WINDOWS/system32
export PATH=$PATH:./
export MANPATH="$MANPATH":/usr/man:/usr/local/man:"$MWMROOT"/man:"$MWMROOT"/LessTif/doc/man
export LD_LIBRARY_PATH=$MWMROOT/lib
export DISPLAY=localhost:0.0
export TERMCAP=/etc/termcap
# Try TERM=vt100 or TERM=linux or ... to achieve the desired behavior
# of the PC cursor keys in vi
export TERM=linux

alias ls='ls --color=tty'

# In case new users are added to Windows, use
#mkpasswd to create a new /etc/passwd file for Cygwin

# To get ssh and sftp going, configure the daemon using /bin/ssh-host-config
# Install sshd as a service? If not, then
#if [ `ps -e | grep sshd | wc -l` == 0 ]; then 
# /usr/sbin/sshd
#fi

# To set up an FTP server, look at proftpd.  Specifically, the file
# /usr/share/doc/proftpd-1.2.10/README.cygwin

# To set up email via command line, create .email.conf and delete
# /etc/email/email.conf if it exists.  Just moving it works.


---------------- Rick Williams' Makefile.config -----------
####################################################################
# Makefile.config   				23 Dec 2004
#
#        Configuration file for the complete tree of Makefiles
#        in the CWP/SU Free Software distribution
#
#		-John Stockwell
#                Center for Wave Phenomena
#                Colorado School of Mines
#
# Instructions:
#   Read this file, thoroughly, and make changes where necessary
#   to reflect the needs of your system. Under most UNIX-like systems
#   the changes you make here will be transmitted to all the Makefiles
#   in the tree of CWP codes, because those Makefiles include this
#   configuration file.
#
#   You need to have set the $(CWPROOT) path environment variable.
#     (Hint: the directory that this file is in is: $(CWPROOT)/src)
#   
#   Make any other changes that are necessary for your particular system.
#   Hints have been provided to aid the user in this task. 
#   
# Installation:      
#   When you are sure you have this file in agreement with your needs,
#     type:  make install    (to install the basic set of codes)  
#            make xtinstall  (to install the X-toolkit codes)  
#            make finstall   (to install the Fortran codes)
#            make mglinstall (to install the Mesa/ Open GL codes)**
#            make xminstall  (to install the X-Motif codes)*  
#   
# to remake
#     type:  make remake    (to remake the basic set of codes)  
#	     make xtremake  (to remake the X-toolkit codes)  
#	     make fremake   (to remake the Fortran codes)
#            make mglremake (to install the Mesa/ Open GL codes)**
#	     make xmremake  (to remake the X-Motif codes)*  
#
# * Note: You must have the Motif Developer's package to install these codes.
#         This is not the same as the "Motif Window Manager". Many systems
#         use the Motif Window Manager without providing libXm.a and Xm.h.
#         These items are not essential to the operation of the package
#         and may be bypassed. (Also, you may substitute Lesstif, for Motif.)
# **      The Mesa/Open GL codes require the Mesa package
# Note also: That * and ** are not necessarry for the majority of SU 
#            operations and can be safely omitted, if you have trouble
#            installing them.
#
# If you have to make changes in a particular program to get it to
# compile, you may continue compilation by typing 'make' in the directory
# where the source code for that program resides. Or you may return to
# the CWPROOT/src directory and type 'make install', 'make xtinstall', or
# 'make xminstall'. On a rare occasion, you might have to use the "remake"
# version of these commands to get the codes to compile properly after
# fixing a particular program.
#
# Common changes:
#  MAKE =  on some older style systems, (for example CONVEX),
#          'make' doesn't support some of the features that we use here.
#          Your best bet is to install GNU make, available free from
#          prep.ai.mit.edu (18.71.0.38).
#
#	   Some PC Unix systems (for example Linux) use GNU make as the
#          official 'make' on their systems.
#
#  CC =    You will need a compiler that supports ANSI C function prototypes.
#          Some vendors may require you to purchase a separate ANSI C.
#          An alternative is the 'gcc' compiler created by the GNU group
#          which is also available free.
########################################################################

########################################################################
# Operating Shell; don't change this line
SHELL = /bin/sh

########################################################################
# HP Apollo users may need to take note of the following:
#
# If it looks like the CWPROOT environment variable isn't being
# passed to the Makefiles below this directory, then explicitly
# define CWPROOT on the next line and uncomment the entry.
#CWPROOT = /your/root/path

# root path ; don't change this line
ROOT = $(CWPROOT)


########################################################################
# ENDIANFLAG tells the compiler whether your machine is has the byte
# order of "big endian" (high byte) or "little endian" (low byte)
# Use this ENDIANFLAG definition for IBM RS6000, SGI, HP, SUN, etc.
#ENDIANFLAG = -DCWP_BIG_ENDIAN

# Use this ENDIANFLAG for PC and DEC products (Linux PC's and Cygwin32)
ENDIANFLAG = -DCWP_LITTLE_ENDIAN

########################################################################
# XDR is the external data representation. This flag is required for
# installations on all 64 bit machines to provide data portability
# Default is to not set the SUXDR option
XDRFLAG =

# uncomment this if you want to install with XDR
#XDRFLAG = -DSUXDR

# for XDR under Linux
#XDRFLAG = -DSUXDR -D_BSD_SOURCE
########################################################################

########################################################################
# Large file support, see Portability/README_LARGE_FILES for more info 
# Default, do not assume LARGE_FILES 
LARGE_FILE_FLAG = 

# uncomment if you want to install with large file support
# RedHat Linux
#LARGE_FILE_FLAG =  -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE

# uncomment if you want to install with large file support
# other platforms (non GNU source)
#LARGE_FILE_FLAG =  -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE

# for SUN OS 5.6
#LARGE_FILE_FLAG = -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE


#######################################################################
# In the Unocal standard of SU, the SU format includes the SEGY binary
# reel header, and the text line header. Uncommenting the
# LINEHDRFLAG line will activate this feature. The SUXDR flag should
# not be set if you intend to live in the Unocal universe.
# 
# Note: Unocal uses a slightly different version of segy.h than
# the CWP/SU standard. The -DUNOCAL_SEGY_H flag invokes this attribute.
# 
# CWP/SU standard
LINEHDRFLAG =

# Unocal/SU standard
# uncomment the next line if you want to use the Unocal SU standard
#LINEHDRFLAG = -DSU_LINE_HEADER -DUNOCAL_SEGY_H


########################################################################
# OPTC is the optimization flag for your C compiler (-O for most)
# this is a typical set of C options; you may need to change this
# line. Note: the -s option strips out debugging information, to
# make the executable files smaller. In all OPTC examples below
# the -s may or may not be used. In fact, at least one SUN user
# had the problem of "nm" complaining because "namelist was missing"
# taking out the -s stopped the problem.
#OPTC = -O -s 
#
# Default-- this works on many systems
#OPTC = -O 

# O3 optimization full ansi (Linux)
#OPTC = -O3 -Wall -ansi -pedantic -D_POSIX_SOURCE 

# another possibility, if you have problems with unistd.h not
# being found
#OPTC = -O3 -Wall -ansi -pedantic -D_POSIX_SOURCE -DHAVE_UNISTD_H

# O3 optimization full ansi non-Posix compliant systems
# this includes Mac OS X and CYGWIN32
OPTC = -O3 -Wall -ansi -pedantic 

# use this for IBM RS6000
#OPTC = -O -DIBMRS6000

# The following OPTC may be used for IBM RS6000 to take
# advantage of the qlanglvl=ansi option.
# If you hit errors that stop the installation, please try 
# make remake  or make xtremake or make xmremake with
# a lower level of optimization, or use the default OPTC above.
#OPTC = -O3 -qlanglvl=ansi  -DIBMRS6000

# The following OPTC is what would be used for HP 9000 installs
#OPTC = -O -Aa -D_HPUX_SOURCE

# Another HP 9000 OPTC line possibility
#OPTC = +O1 -Aa -D_HPUX_SOURCE

# The following OPTC should be used under Solaris 2.xx
#OPTC = -O -D_solaris_2_x_  -DSUN

# The following OPTC may be faster on Sun SPARC, under
# Solaris 2.xx with the GCC compiler
#OPTC= -O2 -msupersparc -fallow-single-precision -ffast-math

# For SUN installing with GCC compiler but without GLIBC libraries
#OPTC = -O -DSUN_A -DSUN

# For other SUN 
#OPTC = -O -DSUN

# For Cray
# Default
#OPTC = -O -DCRAY

# For Cray T3E
#OPTC = -O  -DCRAY -D_CRAYMPP

# For Silicon Graphics Power Challenge (Power Challenge, only).
# Use default OPTC for other SGI products
# the one with "fullwarn" will give many more warnings
#OPTC = -O2 -mips4 -64 -mp -fullwarn
#OPTC = -O2 -mips4 -64 -mp

########################################################################
# PRELFLAGS and POSTLFLAGS are additional linking flags that may be
# useful, for example if you want to statically compile the CWP/SU codes.
# Setting PRELFLAGS will set the linking option at the beginning of the
# string of linker options. Setting POSTLFLAGS will set the linking option
# at the beginning of the string of linker options. 
#
PRELFLAGS =
POSTLFLAGS =

# example of PRELFLAGS for static compiling on SUN with the acc compiler
#PRELFLAGS = -Bstatic

#
#PRELFLAGS = -L/opt/ctl/cvt/3.1.0.0/lib
#POSTLFLAGS =

# Uncomment this for the xminstall phase under Solaris 2.xx
#POSTLFLAGS = -L/usr/ccs/lib -lgen

# For experimental xdr installs under Solaris 2.xx
# See $(CWPROOT)/src/Portability/README_XDR for further information
#POSTLFLAGS = -lnsl

########################################################################
# standard make line; change only if you are using a different 'make'
MAKE = make

########################################################################
# Rules for standard `make' installs
# leave the next line uncommented if you are using the standard Unix "make"
# command.  Make sure the gnumake.rules line is commented out in this case.
#include $(CWPROOT)/src/Rules/oldmake.rules

# If you get error messages about "can't find $(@F), then
# you are actually using GNU make, and need to uncomment the 
# gnumake.rules line
# Rules for 'GNU make' installs (includes Linux, FreeBSD, Mac OS X installs)
# uncomment the next line if you are using  "GNU make" 
include $(CWPROOT)/src/Rules/gnumake.rules


########################################################################
# C compiler; change this only if you are using a different C-compiler
CC = cc

########################################################################
# standard CFLAGS
CFLAGS = -I$I $(OPTC) $(LARGE_FILE_FLAG) $(ENDIANFLAG) $(XDRFLAG) $(LINEHDRFLAG)

########################################################################
# C++ interfacing is still experimental
# C++ compiler
C++ = c++

########################################################################
# standard CFLAGS for C++ 
C++FLAGS = -I$I $(OPTC) $(LARGE_FILE_FLAG) $(ENDIANFLAG) $(XDRFLAG)

########################################################################
# under SUN OS make sure that your load library path is consistent with
# your choice of C compiler above. Be sure to include any other library
# paths (for example X windows).  Set LD_LIBRARY_PATH as a shell environment
# variable or hard set here. An example:
#LD_LIBRARY_PATH = /usr/lang/SC2.0.1patch:/usr/lib/X11R5

# under SUN OS and Linux  uncomment the next line
#LD_LIBRARY_PATH += $(CWPROOT)/lib:/usr/local/lesstif/lib

# under SUN OS and RedHat Linux  uncomment the next line
#LD_LIBRARY_PATH += $(CWPROOT)/lib:/usr/X11R6/LessTif/lib
LD_LIBRARY_PATH += $(CWPROOT)/lib:/usr/X11R6/lib/LessTif

#############################################################################
# the archiver
AR = ar

#############################################################################
# ar FLAGS
ARFLAGS = rv

#############################################################################
# ranlib definition
RANLIB = ranlib

# ranlib flags
RANFLAGS = 

# under IRIX (Silicon Graphics, SGI), you probably will have
# to use this line for RANLIB (also for SOLARIS)
#RANLIB = ar -ts

#############################################################################
# Some Makefiles have change the permissions of executable and other output
# chmod line for include files. These lines should not be changed.
ICHMODLINE = chmod 664 $@

# chmod line for executables
MCHMODLINE = chmod 775 $@

# Uncomment the two lines below if installing under CYGWIN32 under Windows
#ICHMODLINE =
#MCHMODLINE =


#############################################################################
# Default C preprocessor (cpp) definition
# this is the one you will use on most systems
# AIX, IRIX if using the native cc compiler, Linux
CPP = /lib/cpp


# under Solaris, IRIX, AIX, and possibly other with gcc compiler, use:
#CPP = gcc -E
# make sure the path to gcc matches that in the CC = line
#
# You can tell you need to invoke gcc -E  if you compile the package
# and get error messages about programs not recognizing header fields.


# use this under SOLARIS, if using the default C compiler
#CPP = /usr/ccs/lib/cpp

# use this on Cray T3E
#CPP = /opt/ctl/bin/cpp

# use this on Mac OS X and Free BSD
#CPP = /usr/bin/cpp

######################################################################
######################################################################
# Fortan materials.
# The majority of the SU package does not depend on fortran, so you
# are free to ignore this if you are not planning on doing the 'finsintall'
# portion of the installation.
#
# Please note, there may be additional compiler flags necessary to get
# the Fortran codes to work properly. You may need to experiment.
#
# Default for IBM RS6000, SGI
#OPTF = -O

# Default for Linux and other GCC installs (most likely FreeBSD and Mac OS X)
OPTF = -O -static -m486 -ansi -fno-globals -fno-automatic -fno-second-underscore

# Use this for HP
# (If you figure out what goes in 
#the next line,  email me: john@dix.mines.edu)
#OPTF =


######################################################################
# Fortran compiler
# default (use g77 on Linux systems, f77 there is really f2c)
FC = f77

# GNU fortran compiler (Linux systems)
#FC = g77

# Fortran compiler on the Cray T3E 
#FC = f90


#############################################################################
# Some convenient abbreviations (don't change this)
include $(CWPROOT)/src/Rules/abbrev.rules

#####################################################################
#####################################################################
#
# X-windows related materials:
#
# The paths to X11 include files and X11 libraries are not
# consistent between vendors. The following are generic paths.
# You may need to change these, if the include files and libraries
# are not in these locations on your machine.
# The default paths should work on many systems, for example,IBM RS6000.
# Examples of the path SUN are given here.
#
# Troubleshooting:  Make sure that your machine really has the X-windows
# libraries and include files. Make sure that these files really
# are where you think they are.

#####################################################################
#   X11 include and library paths
####
# Generic (RS6000, SGI)
# X11 include path
#IX11 = /usr/local/include

# X11 library path
#LX11 = /usr/local/lib
####

####
## The following X11 include and X11 lib paths are recommended for
## SUN, provided that the standard  X11 stuff is really /usr/openwin. 

# X11 include path
#IX11 = /usr/openwin/include

# X11 library path
#LX11 = /usr/openwin/lib
####

####
## The following paths would be used under Linux
## and possibly under SCO Unix installs
# X11 include path
IX11 = /usr/X11R6/include

# X11 library path
LX11 = /usr/X11R6/lib


####
## Additional X libraries that may be needed for some systems

## Example: uncomment for CYGWIN32 installs
XLFLAGSADD = -lSM -lICE


####
# Motif
# 
# Note: Your machine can be running the Motif Window Manager, but not have the
# Motif Developers Package (include files with names like  Xm.h 
# and libraries with names like libXm.a). You can only do the xminstall
# if you have these include files and libraries. 
#
# include path
#IMOTIF = /usr/local/include

# library path
#LMOTIF = /usr/local/lib

# Example of Lesstif usage:
# include path 
#IMOTIF = /usr/local/lesstif/include

# library path
#LMOTIF = /usr/local/lesstif/lib

#### Example of Lesstif usage under RedHat
# include path 
IMOTIF = /usr/X11R6/include/Xm

# library path
LMOTIF = /usr/X11R6/lib/LessTif


#### Open GL/Mesa include and library paths (generic example)
# Open GL/Mesa include path
IGL = /usr/local/include

# Open GL/Mesa library path
LGL = /usr/local/lib

## GLUT include and library paths
# include path
IGLUT = /usr/local/include

# library path
LGLUT = /usr/local/lib

#### examples for SGI with glut installed in /usr/local/glut-3.3 
## GLUT include and library paths
#IGLUT = /usr/local/glut-3.3

# Open GL/Mesa library path
#LGLUT = /usr/local/glut-3.3/lib/glut.n64   
####

#### Old Red Hat Linux  example
## GLUT include and library paths
#IGLUT = /usr/X11R6/include

# Open GL/Mesa library path
#LGLUT = /usr/X11R6/lib
###

#### Red Hat 7.2 Linux  example
## GLUT include and library paths
IGLUT = /usr/include

# Open GL/Mesa library path
LGLUT = /usr/lib
###

################################################################
### CFLAGS lines (Don't change the next line)
include $(CWPROOT)/src/Rules/cflags.rules

######################################################################
### Linking Flags for Experimental 3D graphics
# The choice here is between the free Mesa package, and the
# Open GL (hardware-based) package.
#
### MESA / OPEN GL Linking Flags
# Uncomment the next line for installations using the free Mesa package
include $(CWPROOT)/src/Rules/newmesa.rules

# Uncomment the following line for installations using Open GL (eg. SGI)
include $(CWPROOT)/src/Rules/opengl.rules

######################################################################


######################################################################
# Suffix rules for library maintenance
#
# If your version of 'make' does not support suffix rules,
# you should install GNU make (often called 'gmake') and use that.
# Gmake is available from prep.ai.mit.edu (18.159.0.42)
# and other GNU mirror sites.

# standard suffix rules (do not change the next line)
include $(CWPROOT)/src/Rules/suffix.rules

include $(CWPROOT)/src/Rules/misc.rules

---------------------------------------------------
---------------------------------------------------
--- older commentary pre 2005 --
---------------------------------------------------
---------------------------------------------------

CYGWIN32 Seismic Unix (SU) Read_Me as provided by Philip J. Brown II 
of the United States Geological Survey (USGS) 
Crustal Imaging and Characterization Team (CICT) 8/6/01

In order to get SU to install on CYGWIN32 under a MS Windows 9x 
operating system I had to do the following:

First install CYGWIN32 using the defaults of the install.  
Current CYGWIN products, documentation and support can be 
found on the internet by searching GOOGLE with keyword CYGWIN.

Before running "Make Install", a ".bash_profile" file needs to be
created in the users home directory.

I simple copied the .bash_profile I got to work under my
Red Hat Linux install.  It looks like this:

# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
. ~/.bashrc
fi

# User specific environment and startup programs

PATH=$PATH:/home/pjbrown/seismic_unix/bin:$HOME/bin:.
BASH_ENV=$HOME/.bashrc

export BASH_ENV PATH
export CWPROOT=/home/pjbrown/seismic_unix
unset USERNAME

After that, following the makefile.config and the
README_TO_INSTALL instructions should make the install intuitive to even the
most casual of observers.  Just make sure that "CPP = gcc -E" and "CC =
gcc".  I have yet to compile any of the Fortran or C++ code.
Additionally I have yet to install any of the X-Graphics stuff but I see
no reason why it couldn't be done.

/*** another, more recent report, 1 August 2002, 
Matthew Karazincir of Vertas suggests that you
should see if /lib/cpp exists, if it does, then

CPP = /lib/cpp 

is the correct setting and "CPP = gcc -E" should be kept commented out
in Makefile.config.
*****/


Once SU is installed under CYWIN32 things should work similar to 
running SU under a Bourne Again Shell (BASH) shell in Linux.  In order 
to get SU to work under a graphical users interface (GUI) developed 
using Visual Basic, IDL, LabVeiw, etc. things get a little 
bit tricky.  Since CYGWIN32 appears to run on top of the MS DOS 
emulator in Windows9x it is difficult to call and exchange information 
with SU because most Windows development packages do no have MS DOS support.  
Potentially there may be more than one way around this problem.  It 
appears that one may compile SU in CYGWIN32 using CC = -mwindows.  This 
will link the compiled program to a GUI application instead of a command 
line application.  According to CYGWIN documentation, compiling in this 
manor allows one to build programs with full access to the standard 
Windows 32-bit API (Application Program Interface), including the GUI 
functions as defined in any MicroSoft or off-the-shelf publication.  
The main difference is that the programmer needs to use GNU (GNU's 
not UNIX) tools instead of MicroSoft tools.  Since I have better things 
to do with my time than try to chase down any more GNU tools and their 
documentation on the internet, I took a much less elegant approach 
to this problem.  Since most Windows development tools can launch a 
DOS application, I wrote a DOS batch file that launches CYGWIN32; it 
looks like this:

@echo off

C:
chdir \cygwin\bin

bash --login -i
exit
exit

I then modified my .bash_profile to launch my SU BASH script 
automatically on login and then logout and exit CYGWIN32 upon 
completion of the script file.  The way that my GUI works is that 
it writes a SU bash script on the fly in accordance with user input 
from the GUI, saves this text file to the appropriate CYGWIN32 directory 
and then launches the DOS batch file.  Once SU is run the GUI can take 
the output and do whatever the programmer desires.  In my case I use 
Research Systems, Inc. Interactive Data Language (IDL) to plot and 
visualize the data.


/***** Additional comments on X-windows by
Matthew Karazincir of Vertas had difficulty with the
xtinstall phase of the SU installation. In Makefile.config
uncomment the line:

XLIBADD = -lSM -lICE = -lSM -lICE

to get this to work.
*****/

/****** further comment on X-windows 
 ****** by Dr. Toshiki Watanabe of the University of Kyoto

After finishing 'make install', do following. This completes the
compilation of all the necessary sources. 

cd $CWPROOT/src/
cd ./Xtcwp; make; cd ..
cd ./xplot; make; cd ..

Under Cygwin, 'make install' compiles source codes located in some 
directories that should be compiled by 'make xtinstall' under UNIX.
That's why 'make xtinstall' answers 'Nothing to be done'.
However these two directries (Xtcwp and xplot) remain untouched.
Therefore I need to compile them manually as far as I experienced. 
I have no idea why such thing happens under Cygwin.
*****/

/******* additional comments by

William J. Moulton
Independent Geophysical Consultant

I did get everything to compile
okay.  I found for whatever reason it was skipping some files and even some
directories.  I manually compiled the missing files/directories and the
compile messages match with the successful install log included.   When I
get a chance I will upload the results for everyones info who wants to run
under cygwin.  The makefiles all appear to be correct or at least there is
nothing that jumps out at me.  But on an install or a remake it would enter
the directory and leave doing nothing.  It may be something unique to cygwin
since it runs on top of the windows shell (ie. a charcter in the file which
is interpretted by Unix as a line delimeter but not by Cygwin).  It also
does not help that Cygwin and GCC released new versions at the same time.

---addendum--- William found later that his problems went away when he
set his path properly

---addendum--- even with this, there was some lingering problem that seems
to be with the compiler.

_--addendum---
It seems that Cygwin released two
versions of the GCC compiler (stable 2.95 and less stable 3.23?). Logically,
they named  the stable version GCC2 and the experimental version GCC.  I
only discovered this when I noticed the second compiler reference during an
upgrade.  Needless to say when I compiled with the GCC2 compiler everything
appears to have gone smooth as silk. I can't wait to try out the system.

For your release notes, those the compiler calls for the makefile are:

gcc-2 instead of gcc
g++-2 instead of g++
g77-2 instead of g77

I don't know if this is the case with all versions of cygwin or just the
most recent.

**/
/***
From Karl Ellefsen:
***********************
1. I added the following lines to  file '.bash_profile':

      export PAGER="less"
      export CWPROOT="/cygdrive/d/su"
      PATH="$CWPROOT/bin:${PATH}"

Under Unix, the command 'more' is used to display a text file on the
console. However, under Windows with Cygwin, this command does not exit.
Instead,
the command 'less' is used. The environmental variable PAGER must be set to
'less'
so that the program documentation can be displayed.

2. I set the following macros in file 'Makefile.config':

      ENDIANFLAG = -DCWP_LITTLE_ENDIAN
      CC = gcc
      C++ = g++
      LD_LIBRARY_PATH += $(CWPROOT)/lib:/usr/X11R6/lib
      ICHMODLINE =
      MCHMODLINE =
      CPP = gcc -E
      FC = g77
      IX11 = /usr/X11R6/include
      LX11 = /usr/X11R6/lib
      XLFLAGSADD = -lSM -lICE

3. For many SU programs, the input and the output is an su file. (I define
a 'su
file' as a binary file containing seismograms that are stored in the SU
variant
of the SEG-Y format.) The input is read using stdin, and the output is
written
using stdout. Both stdin and stdout are text streams, and thus these text
streams
are being used for binary files. This discrepancy isn't a problem under
UNIX,
but it is a big problem under Windows with Cygwin. The problem occurs
because UNIX
and Windows handle files differently, and a detailed explanation of the
differences
is on the web page http://cygwin.com/cygwin-ug-net/using-textbinary.html.
For example,
under Windows with Cygwin, the command
      sustrip <data.su >data.bin
would produce garbled output in data.bin. A simple fix is to pipe the
binary output to command 'cat':
      sustrip <data.su | cat >data.bin
Thus, a binary stream is sent to command 'cat', which then writes the
stream to file
'data.bin'. Notice that stdin (a text stream) is being used to read the
binary file
'data.su'; this particuluar discrepancy has not caused me any problems yet.

If the output of the su program is text or if the output of the su program
is piped to another
su program, this fix is unnecessary.
***/

