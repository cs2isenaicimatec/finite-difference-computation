README DEC					17 Feb 1995

See: README_DEC_ALPHA  for Dec Alpha information

Older Model DEC's:
In a previous version of this file, I suggested that users
try to install the codes on the DEC using the gcc compiler.
This will work for most of the codes. However, the X-windows
graphics will not compile.  However, it is possible to
use the DEC C compiler to compiler all of the codes
(with the exception of Xmcwp) if the following modifications are made.

Necessary modifications of the CWP codes so they will install
on a DEC STATION (5000 series)


These have been made in release 20
------------ Additions to include files ---------------

Put this paragraph near the top of $CWPROOT/src/cwp/include/cwp.h

/* For DEC STATIONS const is not implemented in their C compiler */
#ifdef ultrix
#define const
#endif

Don't use this paragraph if you are installing with the gcc compiler,
or are using a more recent, DEC compiler that is a true ANSI C compiler.

(This one may not be necessary, due to recent changes in the CWP codes.)
Put this paragraph near the top of $CWPROOT/src/psplot/lib/psplot.h

#ifndef CWP_H
#include "cwp.h"
#endif

If you are not using the GCC compiler:

Changes in codes:
1) The DEC C compiler does not permit the breaking of strings. Therefore,
the majority of these changes involve replacing items of the form:

		" string part 1 ", 
		" string part 2 ",
		...
		" string part n ";
with

		" string part 1 string part 2 .... string part n ";

This will be one long wrapped line in  most cases.

2) The DEC C compiler does not permit the following 

		complex czero=cmplx(0.,0.);

These must be changed to:
		complex czero;

		czero=cmplx(0.,0.);

The rest should be self explanatory.

Changes for:  $CWPROOT/src/su/lib/fgettr.c

	line 80:
	replace:

       	                        err("%s: unable to handle %d > %d "
       	                            "samples per trace",
                                   __FILE__, nsfirst, SU_NFLTS);

	with:
                               err("%s: unable to handle %d > %d samples per
	trace", __FILE__, nsfirst, SU_NFLTS);


	line 94:
	replace:
                                        err("%s: first trace: "
                                            "read only %d bytes of %u",
                                             __FILE__, nread, databytes);
	with:

                                        err("%s: first trace: read only %d
bytes of %u", __FILE__, nread, databytes);


	line 108:
	replace:
                       err("%s: on trace #%ld, "
                           "number of samples in header (%d) "
                           "differs from number for first trace (%d)", 

	with:
                       err("%s: on trace #%ld, number of samples in header
(%d) differs from number for first trace (%d)", 


In  $CWPROOT/src/su/main/segyread.c

	line 198:
	replace:

                (over) ? warn("ignoring bh.format ... continue") :
                         err("format not IBM floating point");

	with:

                if (over) 
                        warn("ignoring bh.format ... continue") ;
                else
                         err("format not IBM floating point");


	line 219:
	replace:
                       warn("discrepant tr.ns = %d with tape/user ns = %d\n"
                               "\t... first noted on trace %d",
                               tr.ns, ns, itr + 1);

	with:
                       warn("discrepant tr.ns = %d with tape/user ns = %d\n \t.
.. first noted on trace %d", tr.ns, ns, itr + 1);

	line 244:
	replace

       if (nsflag) warn("discrepancy found in header and trace ns values\n"
               "the value (%d) was used to extract traces", ns);

	with:

       if (nsflag) warn("discrepancy found in header and trace ns values\n the
value (%d) was used to extract traces", ns);



In $CWPROOT/src/su/main/sudmofk.c 
	line 239: 
	replace:
                               fprintf(stderr,"\tCompleted mix of "
                                       "%d offsets with %d traces\n",
                                       noff,ntrace);
	with:

                               fprintf(stderr,"\tCompleted mix of %d offsets wi
th %d traces\n", noff,ntrace);


	line 246:
	replace:

       complex czero=cmplx(0.0,0.0),**ptk,*pu,*pw;


	with:

       complex czero,**ptk,*pu,*pw;
       czero=cmplx(0.0,0.0);


In $CWPROOT/src/su/main/sudmotx.c:
	line 119:

	replace:
 	int ifds=-100;	/* time index of first sample in shaping filter */

	with:
	int ifds= -100;	/* time index of first sample in shaping filter */

	line 226:
	replace:
 				fprintf(stderr,"\tCompleted mix of "
 					"%d offsets with %d traces\n",
 					noff,ntrace);

	with:
 				fprintf(stderr,"\tCompleted mix of %d offsets with %d traces\n", noff,ntrace);


	line 217:
	replace:

	complex czero=cmplx(0.0,0.0),*gs;

	with:
 	complex czero,*gs;
 	czero=cmplx(0.0,0.0);

In $CWPROOT/src/su/main/susort.c 
	line 293:
	replace:

#define NOTPOS   (mtstat.mt_blkno != ((daddr_t) 0)) /* not on Gould     */

	with:

#ifdef ultrix
#define NOTPOS TRUE
#else
#define NOTPOS   (mtstat.mt_blkno != ((daddr_t) 0)) /* not on Gould     */
#endif

In $CWPROOT/src/su/main/sustolt.c 
	line: 270
	replace:
 				fprintf(stderr,"\tCompleted mix of "
 					"%d offsets with %d traces\n",
 					noff,ntrace);
	with:
 				fprintf(stderr,"\tCompleted mix of %d offsets with %d traces\n", noff,ntrace);
 

	line:472
	replace:

 	complex czero=cmplx(0.0,0.0),*pp,*qq;

	with:
 	complex czero,*pp,*qq;
 	czero=cmplx(0.0,0.0);

In $CWPROOT/src/su/main/susynlv.c
	line 228:
	replace:
 		fprintf(stderr,
 			"Minimum possible reflection time (assuming sources\n"
 			"and receivers are at the surface Z=0) is %g s.\n"
 			"You may want to adjust the \"minimum time of \n"
 			"interest\" parameter.\n",tminr);
 		fprintf(stderr,
 			"Total number of small reflecting\n"
 			"segments is %d.\n",ns);

	with:
 		fprintf(stderr, "Minimum possible reflection time (assuming sources\n and receivers are at the surface Z=0) is %g s.\n You may want to adjust the \"minimum time of \n interest\" parameter.\n",tminr);
 		fprintf(stderr, "Total number of small reflecting\n segments is %d.\n",ns);

	line 309:
	replace:
 			err("Reflector number %d specified "
 				"incorrectly!\n",ir+1);

	with:
			err("Reflector number %d specified incorrectly!\n",ir+1);

In $CWPROOT/src/su/main/sutvband.c
	line 92:
	replace:
 		err("must give one f 4-tuple for each"
 		    " (%d) tf value", nfilter);
	

	with:
 		err("must give one f 4-tuple for each (%d) tf value", nfilter);


In $CWPROOT/src/su/main/suvcat.c
	line 151:
	replace:
 		err("%s: unable to handle %d > %d "
 			"samples per trace", __FILE__, nt, SU_NFLTS);

 		err("%s: unable to handle %d > %d samples per trace", __FILE__, nt, SU_NFLTS);

In $CWPROOT/Xtcwp/lib/Axes.c
	line 90:
	replace:

 static char defaultTranslations[] = 
       "<Btn1Down>: input()\n"
       "<Btn1Up>: input()\n"
       "<Btn1Motion>: input()\n";

	with:
 static char defaultTranslations[] = "<Btn1Down>: input()\n <Btn1Up>: input()\n <Btn1Motion>: input()\n";

	line 523:
	replace:

void XtcwpStringToAxesGrid (XrmValue *args, int *nargs, 

	with:

static void XtcwpStringToAxesGrid (XrmValue *args, int *nargs, 

	line 545:
	replace:

void XtcwpStringToAxesStyle (XrmValue *args, int *nargs, 

	with:

static void XtcwpStringToAxesStyle (XrmValue *args, int *nargs, 

The X stuff should work, with the exception of the wiggle trace
programs, xwigb and suxwigb.  I will have to work on those.
There is a "big endian, little endian" (i.e. hi bit low bit) 
difficulty that makes
the variable area displays on the X wiggle traces appear to
be inside-out and backwards. The PostScript wiggle traces
seem to be ok, though.

The problem subroutine is in cwp/lib/rfwtva.c. There is a
version of this for little endian machines (PC's under LINUX)
but it has not been tested on DEC, yet.

See README_LITTLE_ENDIAN for information about fixing the
big-endian/little-endian aspects of the code.

John Stockwell	 | john@dix.Mines.EDU
Center for Wave Phenomena (The Home of Seismic Un*x)
Colorado School of Mines
Golden, CO 80401 | http://www.cwp.mines.edu/cwpcodes
voice: (303) 273-3049  |    fax: (303) 273-3478.
