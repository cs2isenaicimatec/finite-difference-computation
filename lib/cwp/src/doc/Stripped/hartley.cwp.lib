Hartley - routines for fast Hartley transform

srfht -  in-place FHT using the split-radix algorithm
dsrfht - in-place FHT using the split-radix algorithm (double precision)
r4fht -	in-place FHT using the radix-4 algorithm
nextpow2 - find m such that n=2^m via lookup table
nextpow4 - find m such that n=4^m via lookup table
srfht - split-radix in-place FHT

Function Prototypes:

void srfht(int *n, int *m, float *f);
void dsrfht(int *n, int *m, double *f);
void r4fht(int n, int m, float *f);
int nextpow2(int n);
int nextpow4(int n);



Notes:
srfht -  in-place FHT using the split-radix algorithm
		(single precision)
		does not include division by n
		n and m are not modified
		usage:  srfht(int *n, int *m, float *f)
			n  length of input sequence n=2^m
			m  exponent such that n=2^m
	  		f  input sequence to FHT  
		
dsrfht - in-place FHT using the split-radix algorithm
		(double precision)
		does not include division by n
		n and m are not modified
		usage:  srfht(int *n, int *m, double *f)
			n  length of input sequence n=2^m
			m  exponent such that n=2^m
	  		f  input sequence to FHT  

r4fht -	in-place FHT using the radix-4 algorithm
		does not include division by n
		usage:  r4fht(int n, int m, float *f)
			n  length of input sequence n=4^m
			m  exponent such that n=4^m
	  		f  input sequence to FHT  

nextpow2 - find m such that n=2^m via lookup table
			max(n)=2^24
		
nextpow4 - find m such that n=4^m via lookup table
			max(n)=4^12

srfht - split-radix in-place FHT
	  n	length of input sequence n=2^m
	  m	exponent such that n=2^m
 	  f	input sequence to FHT  
   Reference:
       Sorensen, H. V., Jones, D. L., Burrus, C. S, & Heideman, M. T.,
       1985, On computing the Hartley transform: IEEE Trans. Acoust.,
       Speech, and Signal Proc., v. ASSP-33, no. 4, p. 1231-1238.
			
	possible improvements:
		find optimum length for FHT (nfhto)
		use bit shift operators in r4fht
  Credits:	CENPET: Werner M. Heigl, April 2006

