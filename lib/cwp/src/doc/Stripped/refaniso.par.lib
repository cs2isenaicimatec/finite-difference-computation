REFANISO - Reflection coefficients for Anisotropic media

graebner - Reflection/Transmission coeff. (for VTI and TIH media)
           Coefficients are based on Graebner's paper.
gvelpolSH - compute SH group velocity and polarization for TI medium
gvelpolTI - compute P/SV group velocity and polarization for TI medium
p_hor2DTI - compute horizontal slowness for in-plane propagation in TI medium
p_vert2DVTI - Given the horizontal slowness, compute vertical slowness component
rottens2D - rotate 2-D elastic stiffness tensor
stiff2thomVTI - convert density normalized stiffness components 
		parameters into Thomsen's for transversely isotropic 
		material with vertical axes of symmetry
stiff2tv - Convert stiffnesses into Thomsen's parameter of the equivalent
          VTI model, P-wave reflections and azimuthal AVO in TI-media
thom2stiffTI - convert Thomsen's parameters into density normalized 
		stiffness components for transversely isotropic material
		with in-plane-tilted axes of symmetry
thom2tv - Convert generic Thomsen parameters into Thomsen's parameter 
          of the equivalent VTI model
v_phase2DVTI - Given phase angle, compute phase-velocity for TI media

graebner:
Input:
spar1,spar2      stiffnesses for both media
rho1,rho2        densities
pl               horizontal slowness
modei            incident mode (0=P 1=SV)
modet            scattered mode
rort             =1 reflection =0 transmission

Output:
coeff            ref/trans coeff

gvelpolSH:
Input:
aijkl		stiffness elements
px,pz		slowness elements

Output:
vgx, *vgz	group velocities
g11,*g13,*g33  polarizations

gvelpolTI:
Input:
aijkl		stiffness elements
px,pz		slowness elements

Output:
vgx, *vgz	group velocities
g11,*g13,*g33  polarizations

p_hor2DTI: 
Input:
spar		stiffness elements
s		sin(incidence angle)
mode		0=qP-Wave, 1=qSV-wave

Output:
p	horizontal slowness component p_x

p_vert2DVTI:
Input:
spar1            (density normalized) stiffnesses
pl               horizontal slowness
modei            mode (0=P 1=SV)

Output:
p_vert           vertical slowness component

rottens2D:
Input:
aijkl		input/output stiffness elements
phi 		rotation angle (counterclock wise)

stiff2thomVTI :
Input:
aijkl	density normalized stiffness components

Output:
vp,vs	vertical P and S wave velocity
eps	Thomsen's parameter 
delta	Thomsen's parameter 
gamma	Thomsen's parameter 

stiff2tv - Convert stiffnesses into Thomsen's parameter of the equivalent
           VTI model, P-wave reflections and azimuthal AVO in TI-media
Input:
spar            stiffnesses (normalized or non-normal.)

Output:
alpha           fracture plane compressional velocity
beta            S_parallel vertical velocity
ev              eps of equiv. VTI
dv              delta of ..
gv              gamma of ..

thom2tv:
Input:
vp              symm. axis compressional velocity
vs              symm. axis shear velocity
eps             Thomsen's generic parameter as defined with resp. to sym. axis
delta           Thomsen's ..
gamma           Thomsen's ..

Output:
alpha           fracture plane compressional velocity
beta            S_parallel vertical velocity
ev              eps of equiv. VTI
dv              delta of ..
gv              gamma of ..

v_phase2DVTI:
Input:
spar1            (density normalized) stiffnesses
sangle           sin(phase_angle)
mode             mode (0=P 1=SV)

Output:
v_phase          phase-velocity for angle


Function prototypes:
int graebner2D(Stiff2D *spar1, double rho1, Stiff2D *spar2, double rho2,
	 double pl, int modei, int modet, int rort, double *coeff);
void gvelpolSH(double a1212, double a2323, double a1223, double px, 
		double pz, double *vgx, double *vgz, double *g11, 
		double *g13, double *g33)
int gvelpolTI (double a1111, double a3333, double a1133, double a1313,
	double a1113, double a3313, double px, double pz, double *vgx,
	double *vgz, double *g11n, double *g13n, double *g33n);
int p_hor2DTI (Stiff2D *spar, double s, int mode, double *p);
int p_vert2DVTI(Stiff2D *spar1, double pl, int modei, double *p_vert);
void rottens2D (Stiff2D *spar, double phi);
int stiff2thomVTI (double a1111, double a3333, double a1133, double a1313, 	
	double a1212, double *vp, double *vs, double *eps,
        double *delta, double *gamma);
int stiff2tv(Stiff2D *spar,double *alpha,double *beta,double *ev,
			double *dv,double *gv);
int thom2stiffTI (double vp, double vs, double eps, double delta, double gamma,
	double phi, Stiff2D *spar, int sign)
int thom2tv(double vp,double vs,double eps,double delta,double gamma,
	    double *alpha,double *beta,double *ev,double *dv,double *gv);
int v_phase2DVTI(Stiff2D *spar1, double sangle, int mode, double *v_phase);

Author: CWP: Andreas Rueger, 1994-1996, Colorado School of Mines
