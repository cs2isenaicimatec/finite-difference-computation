MODELING - Seismic Modeling Subroutines for SUSYNLV and clones

decodeReflectors	parse reflectors parameter string
decodeReflector		decode a particular reflector
breakReflectors		break up reflectors duplicating interior (x,z) points
makeref			make piecewise cubic reflectors		
raylv2		 	Trace ray between two points,
				for linear velocity v = v00+dvdx*x+dvdz*z

addsinc		Add sinc wavelet to trace at specified time and
			with specified amplitude

makericker	make a Ricker wavelet

Function Prototypes:
void decodeReflectors (int *nrPtr,
	float **aPtr, int **nxzPtr, float ***xPtr, float ***zPtr);
int decodeReflector (char *string,
	float *aPtr, int *nxzPtr, float **xPtr, float **zPtr);
void breakReflectors (int *nr, float **ar, 
	int **nu, float ***xu, float ***zu);
void makeref (float dsmax, int nr, float *ar, 
	int *nu, float **xu, float **zu, Reflector **r);
void raylv2 (float v00, float dvdx, float dvdz,
	float x0, float z0, float x, float z,
	float *c, float *s, float *t, float *q);
void addsinc (float time, float amp,
	int nt, float dt, float ft, float *trace);
void makericker (float fpeak, float dt, Wavelet **w);
	
Notes:
Typedefs used by Hale's modeling
typedef struct ReflectorSegmentStruct {
	float x;	* x coordinate of segment midpoint *
	float z;	* z coordinate of segment midpoint *
	float s;	* x component of unit-normal-vector *
	float c;	* z component of unit-normal-vector *
} ReflectorSegment;
typedef struct ReflectorStruct {
	int ns;			* number of reflector segments *
	float ds;		* segment length *
	float a;		* amplitude of reflector *
	ReflectorSegment *rs;	* array[ns] of reflector segments *
} Reflector;
typedef struct WaveletStruct {
	int lw;			* length of wavelet *
	int iw;			* index of first wavelet sample *
	float *wv;		* wavelet sample values *
} Wavelet;

These are items used in SUSYNLV, SUSYNVXZ, SUSYNLVCW.

Author: Dave Hale, Colorado School of Mines, 09/17/91
